#! /bin/sh -e

PREREQ=""
prereqs()
{
	echo "$PREREQ"
}

case "$1" in
	prereqs)
		prereqs
		exit 0
		;;
esac

TMPFILE="/run/initramfs/old-table.txt"
LOGFILE="/run/initramfs/resize-writable.log"
LABEL="PI_ROOT"

for opt in $(cat /proc/cmdline); do
	case $opt in
		debug)
			LOGFILE="/dev/kmsg"
		;;
	esac
done

writable_part="$(findfs LABEL=$LABEL)"

syspath="$(dirname $(realpath /sys/class/block/$(basename $writable_part)))"
device="$(realpath /dev/block/$(cat $syspath/dev))"
partition=$(cat $syspath/$(basename $writable_part)/partition)

device_size="$(($(cat $syspath/size)/2))"
sum_size="$(($(grep $(basename $device)[a-z0-9] /proc/partitions|\
	tr -s ' '|cut -d' ' -f4|tr '\n' '+'|sed 's/+$//')))"

get_end()
{
	NUM=$1
	lastpart="$(grep -cE ^'[0-9]{1,}': $TMPFILE)"
	if [ "$lastpart" = "$NUM" ]; then
		endsize="$(parted -ms $DEV print| grep ^/ | cut -d: -f2)"
	else
		# we are not at the end ! get the start of the next partition
		# (minus 1 byte) instead of using the absolute end of the disk
		endsize=$(($(parted -ms $DEV unit B print|grep ^$(($num+1)):|\
			cut -d: -f2|sed 's/B$//')-1))
	fi
	echo "$endsize"
}

do_mbr()
{
	DEV=$1
	PART=$2
	endsize=$(get_end $PART)
	parted -s $DEV resizepart $PART $endsize
}


free_space=$(($device_size-$sum_size))
min_free_space=$(($device_size/10))

if [ "$min_free_space" -lt "$free_space" ]; then
	echo "initrd: found more than 10% free space on disk, resizing ${writable_part}" >/dev/kmsg || true
	echo "initrd: partition to full disk size, see ${LOGFILE} for details" >/dev/kmsg || true
	# back up the original partition table for later use or debugging
	parted -ms $device unit B print >$TMPFILE 2>/dev/null
	# grow our selected partition to max space available
	table="$(parted -ms $device print| grep ^/| cut -d: -f6)"
	case $table in
		mbr|msdos)
			# do_mbr needs the device node and partition number
			do_mbr $device $partition >>$LOGFILE 2>&1
			resizeopts="-f"
			;;
		*)
			echo "unknown partition table type, not resizing" >>$LOGFILE
			exit 0
			;;
	esac
	# make sure the partitions are ready for further use
	udevadm settle >>$LOGFILE 2>&1
	# check the filesystem before attempting re-size
	e2fsck -fy $writable_part >>$LOGFILE 2>&1
	# resize the filesystem to full size of the partition
	resize2fs $resizeopts $writable_part >>$LOGFILE 2>&1
fi
